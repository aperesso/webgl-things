{"ast":null,"code":"import * as THREE from 'three';\nimport * as dat from 'dat.gui';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport Sphere from './Sphere';\nimport Light from './Light';\nimport ParticleSystem from './ParticleSystem';\nimport Movers from './Movers';\nimport PostProcessing from './PostProcessing';\nconst FOV = 100;\nconst NEAR = 0.1;\nconst FAR = 1000;\nconst margin = 200;\n\nclass World {\n  constructor() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(FOV, window.innerWidth / (window.innerHeight - margin), NEAR, FAR);\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    this.sphere = new Sphere();\n    this.particleSystem = new ParticleSystem();\n    this.movers = new Movers();\n    this.light = new Light();\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.postProcessor = new PostProcessing(this.scene, this.camera, this.renderer);\n  }\n\n}\n\nWorld.prototype.listenForResize = function () {\n  window.addEventListener('resize', () => {\n    this.camera.aspect = window.innerWidth / (window.innerHeight - margin);\n    this.camera.updateProjectionMatrix();\n    this.postProcessor.setSize();\n  });\n};\n\nWorld.prototype.setUpMeshes = async function () {\n  const ambientLight = new THREE.AmbientLight(0x333333);\n  this.scene.add(ambientLight);\n  const directionalLight = new THREE.DirectionalLight(0xfafafa, 0.7);\n  directionalLight.position.set(0, 10, 5);\n  this.scene.add(directionalLight);\n  this.sphere.setLights(this.light);\n  await this.sphere.initMesh();\n  this.scene.add(this.sphere.mesh); // this.sphere.mesh.layers.disableAll();\n  // this.sphere.mesh.layers.enable(0);\n  // this.sphere.mesh.layers.enable(1);\n\n  await this.particleSystem.init();\n  this.scene.add(this.particleSystem.mesh); // this.particleSystem.mesh.layers.disableAll();\n  // this.particleSystem.mesh.layers.enable(1);\n\n  this.movers.init(this.cubeCamera);\n  this.movers.array.forEach(mover => this.scene.add(mover.mesh));\n};\n\nWorld.prototype.init = async function () {\n  this.renderer.setPixelRatio(window.devicePixelRatio);\n  this.renderer.setClearColor(new THREE.Color('#ffb6c1'), 1.0);\n  this.camera.position.z = 20;\n  this.camera.position.y = 0;\n  this.setUpMeshes();\n  this.setUpGui();\n  this.postProcessor.setSize();\n  this.postProcessor.applyBloom();\n  this.listenForResize();\n  this.postProcessor.init(); // this.postProcessor.applyBloom();\n\n  document.body.appendChild(this.renderer.domElement);\n};\n\nWorld.prototype.start = function () {\n  this.renderer.setAnimationLoop(() => {\n    const time = Date.now() * 0.001;\n    this.sphere.animate();\n    this.movers.animate(time);\n    this.particleSystem.animate();\n    this.postProcessor.render();\n  });\n};\n\nWorld.prototype.setUpGui = function () {\n  const gui = new dat.GUI();\n  this.light.setGui(gui);\n  this.sphere.setGui(gui);\n};\n\nexport default World;","map":{"version":3,"sources":["/Users/alexiaperesson/webgl-things/src/classes/World.js"],"names":["THREE","dat","OrbitControls","Sphere","Light","ParticleSystem","Movers","PostProcessing","FOV","NEAR","FAR","margin","World","constructor","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","alpha","sphere","particleSystem","movers","light","controls","domElement","postProcessor","prototype","listenForResize","addEventListener","aspect","updateProjectionMatrix","setSize","setUpMeshes","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","setLights","initMesh","mesh","init","cubeCamera","array","forEach","mover","setPixelRatio","devicePixelRatio","setClearColor","Color","z","y","setUpGui","applyBloom","document","body","appendChild","start","setAnimationLoop","time","Date","now","animate","render","gui","GUI","setGui"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,SAArB;AACA,SAASC,aAAT,QAA8B,2CAA9B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,GAAG,GAAK,GAAd;AACA,MAAMC,IAAI,GAAI,GAAd;AACA,MAAMC,GAAG,GAAK,IAAd;AACA,MAAMC,MAAM,GAAG,GAAf;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,GAAG;AACV,SAAKC,KAAL,GAAc,IAAId,KAAK,CAACe,KAAV,EAAd;AACA,SAAKC,MAAL,GAAc,IAAIhB,KAAK,CAACiB,iBAAV,CAA4BT,GAA5B,EAAiCU,MAAM,CAACC,UAAP,IAAqBD,MAAM,CAACE,WAAP,GAAqBT,MAA1C,CAAjC,EAAoFF,IAApF,EAA0FC,GAA1F,CAAd;AAEA,SAAKW,QAAL,GAAgB,IAAIrB,KAAK,CAACsB,aAAV,CAAwB;AAACC,MAAAA,SAAS,EAAE,IAAZ;AAAkBC,MAAAA,KAAK,EAAE;AAAzB,KAAxB,CAAhB;AAEA,SAAKC,MAAL,GAAc,IAAItB,MAAJ,EAAd;AACA,SAAKuB,cAAL,GAAsB,IAAIrB,cAAJ,EAAtB;AACA,SAAKsB,MAAL,GAAc,IAAIrB,MAAJ,EAAd;AACA,SAAKsB,KAAL,GAAa,IAAIxB,KAAJ,EAAb;AAEA,SAAKyB,QAAL,GAAgB,IAAI3B,aAAJ,CAAkB,KAAKc,MAAvB,EAA+B,KAAKK,QAAL,CAAcS,UAA7C,CAAhB;AACA,SAAKC,aAAL,GAAqB,IAAIxB,cAAJ,CAAmB,KAAKO,KAAxB,EAA+B,KAAKE,MAApC,EAA4C,KAAKK,QAAjD,CAArB;AACH;;AAdO;;AAiBZT,KAAK,CAACoB,SAAN,CAAgBC,eAAhB,GAAkC,YAAW;AACzCf,EAAAA,MAAM,CAACgB,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpC,SAAKlB,MAAL,CAAYmB,MAAZ,GAAqBjB,MAAM,CAACC,UAAP,IAAqBD,MAAM,CAACE,WAAP,GAAqBT,MAA1C,CAArB;AACA,SAAKK,MAAL,CAAYoB,sBAAZ;AACA,SAAKL,aAAL,CAAmBM,OAAnB;AACH,GAJD;AAKH,CAND;;AAQAzB,KAAK,CAACoB,SAAN,CAAgBM,WAAhB,GAA8B,kBAAiB;AAE3C,QAAMC,YAAY,GAAG,IAAIvC,KAAK,CAACwC,YAAV,CAAuB,QAAvB,CAArB;AACA,OAAK1B,KAAL,CAAW2B,GAAX,CAAeF,YAAf;AAEA,QAAMG,gBAAgB,GAAG,IAAI1C,KAAK,CAAC2C,gBAAV,CAA2B,QAA3B,EAAqC,GAArC,CAAzB;AACAD,EAAAA,gBAAgB,CAACE,QAAjB,CAA0BC,GAA1B,CAA8B,CAA9B,EAAiC,EAAjC,EAAqC,CAArC;AACA,OAAK/B,KAAL,CAAW2B,GAAX,CAAeC,gBAAf;AAEA,OAAKjB,MAAL,CAAYqB,SAAZ,CAAsB,KAAKlB,KAA3B;AACA,QAAM,KAAKH,MAAL,CAAYsB,QAAZ,EAAN;AACA,OAAKjC,KAAL,CAAW2B,GAAX,CAAe,KAAKhB,MAAL,CAAYuB,IAA3B,EAX2C,CAY3C;AACA;AACA;;AAEA,QAAM,KAAKtB,cAAL,CAAoBuB,IAApB,EAAN;AACA,OAAKnC,KAAL,CAAW2B,GAAX,CAAe,KAAKf,cAAL,CAAoBsB,IAAnC,EAjB2C,CAkB3C;AACA;;AAGA,OAAKrB,MAAL,CAAYsB,IAAZ,CAAiB,KAAKC,UAAtB;AACA,OAAKvB,MAAL,CAAYwB,KAAZ,CAAkBC,OAAlB,CAA0BC,KAAK,IAAI,KAAKvC,KAAL,CAAW2B,GAAX,CAAeY,KAAK,CAACL,IAArB,CAAnC;AAIH,CA3BD;;AA6BApC,KAAK,CAACoB,SAAN,CAAgBiB,IAAhB,GAAuB,kBAAiB;AACpC,OAAK5B,QAAL,CAAciC,aAAd,CAA6BpC,MAAM,CAACqC,gBAApC;AACA,OAAKlC,QAAL,CAAcmC,aAAd,CAA4B,IAAIxD,KAAK,CAACyD,KAAV,CAAgB,SAAhB,CAA5B,EAAwD,GAAxD;AAEA,OAAKzC,MAAL,CAAY4B,QAAZ,CAAqBc,CAArB,GAAyB,EAAzB;AACA,OAAK1C,MAAL,CAAY4B,QAAZ,CAAqBe,CAArB,GAAyB,CAAzB;AAEA,OAAKrB,WAAL;AACA,OAAKsB,QAAL;AAEA,OAAK7B,aAAL,CAAmBM,OAAnB;AACA,OAAKN,aAAL,CAAmB8B,UAAnB;AACA,OAAK5B,eAAL;AAEA,OAAKF,aAAL,CAAmBkB,IAAnB,GAdoC,CAepC;;AAEAa,EAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0B,KAAK3C,QAAL,CAAcS,UAAxC;AACH,CAlBD;;AAoBAlB,KAAK,CAACoB,SAAN,CAAgBiC,KAAhB,GAAwB,YAAW;AAC/B,OAAK5C,QAAL,CAAc6C,gBAAd,CACI,MAAM;AACF,UAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,KAAa,KAA1B;AACA,SAAK5C,MAAL,CAAY6C,OAAZ;AACA,SAAK3C,MAAL,CAAY2C,OAAZ,CAAoBH,IAApB;AACA,SAAKzC,cAAL,CAAoB4C,OAApB;AACA,SAAKvC,aAAL,CAAmBwC,MAAnB;AACH,GAPL;AASH,CAVD;;AAYA3D,KAAK,CAACoB,SAAN,CAAgB4B,QAAhB,GAA2B,YAAW;AAClC,QAAMY,GAAG,GAAG,IAAIvE,GAAG,CAACwE,GAAR,EAAZ;AACA,OAAK7C,KAAL,CAAW8C,MAAX,CAAkBF,GAAlB;AACA,OAAK/C,MAAL,CAAYiD,MAAZ,CAAmBF,GAAnB;AACH,CAJD;;AAMA,eAAe5D,KAAf","sourcesContent":["import * as THREE from 'three';\nimport * as dat from 'dat.gui';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport Sphere from './Sphere';\nimport Light from './Light';\nimport ParticleSystem from './ParticleSystem';\nimport Movers from './Movers';\nimport PostProcessing from './PostProcessing';\n\nconst FOV   = 100;\nconst NEAR  = 0.1;\nconst FAR   = 1000;\nconst margin = 200\n\nclass World {\n    constructor() {\n        this.scene  = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(FOV, window.innerWidth / (window.innerHeight - margin), NEAR, FAR);\n        \n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\n       \n        this.sphere = new Sphere();\n        this.particleSystem = new ParticleSystem();\n        this.movers = new Movers();\n        this.light = new Light();\n\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.postProcessor = new PostProcessing(this.scene, this.camera, this.renderer)\n    } \n}\n\nWorld.prototype.listenForResize = function() {\n    window.addEventListener('resize', () => {\n        this.camera.aspect = window.innerWidth / (window.innerHeight - margin);\n        this.camera.updateProjectionMatrix();\n        this.postProcessor.setSize();\n    })\n}\n\nWorld.prototype.setUpMeshes = async function() {\n\n    const ambientLight = new THREE.AmbientLight(0x333333);\n    this.scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xfafafa, 0.7);\n    directionalLight.position.set(0, 10, 5);\n    this.scene.add(directionalLight);\n\n    this.sphere.setLights(this.light);\n    await this.sphere.initMesh();\n    this.scene.add(this.sphere.mesh);\n    // this.sphere.mesh.layers.disableAll();\n    // this.sphere.mesh.layers.enable(0);\n    // this.sphere.mesh.layers.enable(1);\n\n    await this.particleSystem.init();\n    this.scene.add(this.particleSystem.mesh);\n    // this.particleSystem.mesh.layers.disableAll();\n    // this.particleSystem.mesh.layers.enable(1);\n\n\n    this.movers.init(this.cubeCamera);\n    this.movers.array.forEach(mover => this.scene.add(mover.mesh))\n\n    \n\n}\n\nWorld.prototype.init = async function() { \n    this.renderer.setPixelRatio( window.devicePixelRatio );\n    this.renderer.setClearColor(new THREE.Color('#ffb6c1'), 1.0);\n\n    this.camera.position.z = 20;\n    this.camera.position.y = 0;\n\n    this.setUpMeshes();\n    this.setUpGui();\n\n    this.postProcessor.setSize();\n    this.postProcessor.applyBloom();\n    this.listenForResize();\n\n    this.postProcessor.init();\n    // this.postProcessor.applyBloom();\n    \n    document.body.appendChild(this.renderer.domElement);\n}\n\nWorld.prototype.start = function() {\n    this.renderer.setAnimationLoop(\n        () => {\n            const time = Date.now() * 0.001;\n            this.sphere.animate();\n            this.movers.animate(time);\n            this.particleSystem.animate();\n            this.postProcessor.render();\n        }\n    )\n}\n\nWorld.prototype.setUpGui = function() {\n    const gui = new dat.GUI();\n    this.light.setGui(gui);\n    this.sphere.setGui(gui);\n}\n\nexport default World;"]},"metadata":{},"sourceType":"module"}