{"ast":null,"code":"import _slicedToArray from \"/Users/alexiaperesson/webgl-things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as THREE from \"three\";\nimport SimplexNoise from 'simplex-noise';\n\nclass FlowField {\n  constructor(flowArea) {\n    this.flowArea = flowArea;\n    this.grid = null;\n    this.gridDimension = 30;\n  }\n\n}\n\nFlowField.prototype.getPos = function (coord) {\n  const c = Math.floor(THREE.Math.mapLinear(coord, -this.flowArea, this.flowArea, 0, this.gridDimension - 1));\n  if (c < 0) return 0;\n  if (c > this.gridDimension - 1) return this.gridDimension - 1;\n  return c;\n};\n\nFlowField.prototype.getFlowDirection = function (position) {\n  const _map = ['x', 'y', 'z'].map(i => this.getPos(position[i])),\n        _map2 = _slicedToArray(_map, 3),\n        x = _map2[0],\n        y = _map2[1],\n        z = _map2[2];\n\n  const flowDirection = this.grid[x][y][z];\n  return flowDirection;\n};\n\nFlowField.prototype.init = function () {\n  const simplex = new SimplexNoise(Math.random);\n  const grid = new Array(this.gridDimension).fill(null).map((x, i) => new Array(this.gridDimension).fill(null).map((y, j) => new Array(this.gridDimension).fill(null).map((z, k) => {\n    const noise = simplex.noise3D(i, j, k);\n    return new THREE.Vector3(Math.cos(noise * Math.PI), Math.sin(noise * Math.PI), Math.cos(noise * Math.PI)).normalize().multiplyScalar(0.00001);\n  })));\n  this.grid = grid;\n};\n\nexport default FlowField;","map":{"version":3,"sources":["/Users/alexiaperesson/webgl-things/src/classes/FlowField.js"],"names":["THREE","SimplexNoise","FlowField","constructor","flowArea","grid","gridDimension","prototype","getPos","coord","c","Math","floor","mapLinear","getFlowDirection","position","map","i","x","y","z","flowDirection","init","simplex","random","Array","fill","j","k","noise","noise3D","Vector3","cos","PI","sin","normalize","multiplyScalar"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,YAAP,MAAyB,eAAzB;;AAGA,MAAMC,SAAN,CAAgB;AACZC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,aAAL,GAAqB,EAArB;AACH;;AALW;;AAQhBJ,SAAS,CAACK,SAAV,CAAoBC,MAApB,GAA6B,UAASC,KAAT,EAAe;AACxC,QAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWZ,KAAK,CAACW,IAAN,CAAWE,SAAX,CAAqBJ,KAArB,EAA4B,CAAC,KAAKL,QAAlC,EAA4C,KAAKA,QAAjD,EAA2D,CAA3D,EAA8D,KAAKE,aAAL,GAAqB,CAAnF,CAAX,CAAV;AACA,MAAII,CAAC,GAAG,CAAR,EAAW,OAAO,CAAP;AACX,MAAIA,CAAC,GAAG,KAAKJ,aAAL,GAAqB,CAA7B,EAAgC,OAAO,KAAKA,aAAL,GAAqB,CAA5B;AAChC,SAAOI,CAAP;AACH,CALD;;AAOAR,SAAS,CAACK,SAAV,CAAoBO,gBAApB,GAAuC,UAASC,QAAT,EAAmB;AAAA,eACpC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgBC,GAAhB,CAAoBC,CAAC,IAAI,KAAKT,MAAL,CAAYO,QAAQ,CAACE,CAAD,CAApB,CAAzB,CADoC;AAAA;AAAA,QAC/CC,CAD+C;AAAA,QAC5CC,CAD4C;AAAA,QACzCC,CADyC;;AAEtD,QAAMC,aAAa,GAAG,KAAKhB,IAAL,CAAUa,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,CAAtB;AACA,SAAOC,aAAP;AACH,CAJD;;AAMAnB,SAAS,CAACK,SAAV,CAAoBe,IAApB,GAA2B,YAAW;AAClC,QAAMC,OAAO,GAAG,IAAItB,YAAJ,CAAiBU,IAAI,CAACa,MAAtB,CAAhB;AACA,QAAMnB,IAAI,GAAG,IAAIoB,KAAJ,CAAU,KAAKnB,aAAf,EAA8BoB,IAA9B,CAAmC,IAAnC,EACRV,GADQ,CAEL,CAACE,CAAD,EAAID,CAAJ,KAAU,IAAIQ,KAAJ,CAAU,KAAKnB,aAAf,EAA8BoB,IAA9B,CAAmC,IAAnC,EACLV,GADK,CAEF,CAACG,CAAD,EAAIQ,CAAJ,KAAU,IAAIF,KAAJ,CAAU,KAAKnB,aAAf,EAA8BoB,IAA9B,CAAmC,IAAnC,EACLV,GADK,CAEF,CAACI,CAAD,EAAIQ,CAAJ,KAAU;AACN,UAAMC,KAAK,GAAGN,OAAO,CAACO,OAAR,CAAgBb,CAAhB,EAAoBU,CAApB,EAAwBC,CAAxB,CAAd;AACA,WAAO,IAAI5B,KAAK,CAAC+B,OAAV,CACHpB,IAAI,CAACqB,GAAL,CAASH,KAAK,GAAGlB,IAAI,CAACsB,EAAtB,CADG,EAEHtB,IAAI,CAACuB,GAAL,CAASL,KAAK,GAAGlB,IAAI,CAACsB,EAAtB,CAFG,EAGHtB,IAAI,CAACqB,GAAL,CAASH,KAAK,GAAGlB,IAAI,CAACsB,EAAtB,CAHG,EAILE,SAJK,GAIOC,cAJP,CAIsB,OAJtB,CAAP;AAKH,GATC,CAFR,CAFL,CAAb;AAiBA,OAAK/B,IAAL,GAAYA,IAAZ;AACH,CApBD;;AAuBA,eAAeH,SAAf","sourcesContent":["import * as THREE from \"three\";\n\nimport SimplexNoise from 'simplex-noise';\n\n\nclass FlowField {\n    constructor(flowArea) {\n        this.flowArea = flowArea;\n        this.grid = null;\n        this.gridDimension = 30;\n    }\n}\n\nFlowField.prototype.getPos = function(coord){\n    const c = Math.floor(THREE.Math.mapLinear(coord, -this.flowArea, this.flowArea, 0, this.gridDimension - 1));\n    if (c < 0) return 0;\n    if (c > this.gridDimension - 1) return this.gridDimension - 1;\n    return c;\n}\n\nFlowField.prototype.getFlowDirection = function(position) {\n    const [x, y, z] = ['x', 'y', 'z'].map(i => this.getPos(position[i]))\n    const flowDirection = this.grid[x][y][z];\n    return flowDirection;\n}\n\nFlowField.prototype.init = function() {\n    const simplex = new SimplexNoise(Math.random);\n    const grid = new Array(this.gridDimension).fill(null)\n        .map(\n            (x, i) => new Array(this.gridDimension).fill(null)\n                .map(\n                    (y, j) => new Array(this.gridDimension).fill(null)\n                        .map(\n                            (z, k) => {\n                                const noise = simplex.noise3D(i , j , k)\n                                return new THREE.Vector3(\n                                    Math.cos(noise * Math.PI) ,\n                                    Math.sin(noise * Math.PI)  ,\n                                    Math.cos(noise * Math.PI)\n                                ).normalize().multiplyScalar(0.00001)\n                            }\n                        )\n                )\n        )\n    this.grid = grid;\n}\n\n\nexport default FlowField;"]},"metadata":{},"sourceType":"module"}