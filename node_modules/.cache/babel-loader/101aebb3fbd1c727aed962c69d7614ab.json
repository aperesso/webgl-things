{"ast":null,"code":"import _objectSpread from \"/Users/alexiaperesson/webgl-things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as THREE from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport { SPHERE_SETTINGS, LIGHT_SETTINGS } from '../settings';\nimport { loadShaders, loadFile } from '../utils';\n\nconst Sphere = function () {\n  this.mesh = null;\n};\n\nSphere.prototype.setMesh = async function () {\n  const radius = SPHERE_SETTINGS.radius,\n        segments = SPHERE_SETTINGS.segments,\n        noiseScale = SPHERE_SETTINGS.noiseScale,\n        noiseFrequency = SPHERE_SETTINGS.noiseFrequency,\n        noiseOffset = SPHERE_SETTINGS.noiseOffset,\n        material = SPHERE_SETTINGS.material;\n  const geometry = new THREE.SphereBufferGeometry(radius, segments, segments);\n  BufferGeometryUtils.computeTangents(geometry);\n  const uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib.light, THREE.UniformsLib.fog, {\n    lightPosition: {\n      type: 'v3',\n      value: new THREE.Vector3(700, 700, 700)\n    },\n    time: {\n      type: 'f',\n      value: 0\n    },\n    uNoiseScale: {\n      value: noiseScale\n    },\n    uNoiseFrequency: {\n      value: noiseFrequency\n    },\n    uNoiseOffset: {\n      value: noiseOffset\n    },\n    uTime: {\n      value: 1.0\n    },\n    uMaterialAmbient: {\n      value: new THREE.Vector3(...material.ambient)\n    },\n    uMaterialSpecular: {\n      value: new THREE.Vector3(...material.specular)\n    },\n    uMaterialDiffuse: {\n      value: new THREE.Vector3(...material.diffuse)\n    },\n    uMaterialShininess: {\n      value: material.shininess\n    },\n    uLightAmbient: {\n      value: new THREE.Vector3(...LIGHT_SETTINGS.ambient)\n    },\n    uLightDiffuse: {\n      value: new THREE.Vector3(...LIGHT_SETTINGS.diffuse)\n    },\n    uLightSpecular: {\n      value: new THREE.Vector3(...LIGHT_SETTINGS.specular)\n    },\n    uLightPosition: {\n      value: LIGHT_SETTINGS.position\n    }\n  }]);\n  const shaders = await loadShaders('sphere');\n  const sphereMaterial = new THREE.ShaderMaterial(_objectSpread({\n    uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib.light, THREE.UniformsLib.fog, {\n      lightPosition: {\n        type: 'v3',\n        value: new THREE.Vector3(700, 700, 700)\n      },\n      time: {\n        type: 'f',\n        value: 0\n      },\n      uNoiseScale: {\n        value: noiseScale\n      },\n      uNoiseFrequency: {\n        value: noiseFrequency\n      },\n      uNoiseOffset: {\n        value: noiseOffset\n      },\n      uTime: {\n        value: 1.0\n      },\n      uMaterialAmbient: {\n        value: new THREE.Vector3(...material.ambient)\n      },\n      uMaterialSpecular: {\n        value: new THREE.Vector3(...material.specular)\n      },\n      uMaterialDiffuse: {\n        value: new THREE.Vector3(...material.diffuse)\n      },\n      uMaterialShininess: {\n        value: material.shininess\n      },\n      uLightAmbient: {\n        value: new THREE.Vector3(...LIGHT_SETTINGS.ambient)\n      },\n      uLightDiffuse: {\n        value: new THREE.Vector3(...LIGHT_SETTINGS.diffuse)\n      },\n      uLightSpecular: {\n        value: new THREE.Vector3(...LIGHT_SETTINGS.specular)\n      },\n      uLightPosition: {\n        value: LIGHT_SETTINGS.position\n      }\n    }])\n  }, shaders));\n  const depthShader = await loadFile(\"\".concat(process.env.PUBLIC_URL, \"/shaders/sphere/depthShader.glsl\"));\n  this.mesh = new THREE.Mesh(geometry, sphereMaterial);\n  this.mesh.customDepthMaterial = new THREE.ShaderMaterial({\n    uniforms,\n    vertexShader: depthShader,\n    fragmentShader: THREE.ShaderLib.shadow.fragmentShader\n  });\n  this.mesh.castShadow = true;\n};\n\nSphere.prototype.animate = function () {\n  // console.log(this.mesh)\n  if (this.mesh === null) return;\n  this.mesh.material.uniforms[\"uTime\"].value += 0.01;\n  this.mesh.customDepthMaterial.uniforms[\"uTime\"].value += 0.01;\n};\n\nexport default Sphere;","map":{"version":3,"sources":["/Users/alexiaperesson/webgl-things/src/scene/Sphere.js"],"names":["THREE","BufferGeometryUtils","SPHERE_SETTINGS","LIGHT_SETTINGS","loadShaders","loadFile","Sphere","mesh","prototype","setMesh","radius","segments","noiseScale","noiseFrequency","noiseOffset","material","geometry","SphereBufferGeometry","computeTangents","uniforms","UniformsUtils","merge","UniformsLib","light","fog","lightPosition","type","value","Vector3","time","uNoiseScale","uNoiseFrequency","uNoiseOffset","uTime","uMaterialAmbient","ambient","uMaterialSpecular","specular","uMaterialDiffuse","diffuse","uMaterialShininess","shininess","uLightAmbient","uLightDiffuse","uLightSpecular","uLightPosition","position","shaders","sphereMaterial","ShaderMaterial","depthShader","process","env","PUBLIC_URL","Mesh","customDepthMaterial","vertexShader","fragmentShader","ShaderLib","shadow","castShadow","animate"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nimport { SPHERE_SETTINGS , LIGHT_SETTINGS } from '../settings';\nimport { loadShaders , loadFile } from '../utils';\n\nconst Sphere = function() {\n  this.mesh = null;\n}\n\nSphere.prototype.setMesh = async function() {\n  const { radius, segments , noiseScale, noiseFrequency, noiseOffset , material } = SPHERE_SETTINGS;\n\n  const geometry = new THREE.SphereBufferGeometry(radius, segments, segments);\n  BufferGeometryUtils.computeTangents(geometry);\n\n  const uniforms =  THREE.UniformsUtils.merge([\n    THREE.UniformsLib.light,\n    THREE.UniformsLib.fog,\n    {\n        lightPosition: {type: 'v3', value: new THREE.Vector3(700, 700, 700)},\n        time: {type: 'f', value: 0},\n        uNoiseScale : { value : noiseScale },\n        uNoiseFrequency : { value : noiseFrequency },\n        uNoiseOffset : { value : noiseOffset },\n        uTime : { value : 1.0 },\n        uMaterialAmbient : { value : new THREE.Vector3(...material.ambient) },\n        uMaterialSpecular : { value : new THREE.Vector3(...material.specular) },\n        uMaterialDiffuse : { value : new THREE.Vector3(...material.diffuse) },\n        uMaterialShininess : { value : material.shininess },\n        uLightAmbient : { value : new THREE.Vector3(...LIGHT_SETTINGS.ambient) },\n        uLightDiffuse : { value : new THREE.Vector3(...LIGHT_SETTINGS.diffuse) },\n        uLightSpecular : { value : new THREE.Vector3(...LIGHT_SETTINGS.specular) },\n        uLightPosition : { value : LIGHT_SETTINGS.position }\n    }\n  ])\n\n  const shaders = await loadShaders('sphere');\n  const sphereMaterial = new THREE.ShaderMaterial({\n    uniforms : THREE.UniformsUtils.merge([\n      THREE.UniformsLib.light,\n      THREE.UniformsLib.fog,\n      {\n          lightPosition: {type: 'v3', value: new THREE.Vector3(700, 700, 700)},\n          time: {type: 'f', value: 0},\n          uNoiseScale : { value : noiseScale },\n          uNoiseFrequency : { value : noiseFrequency },\n          uNoiseOffset : { value : noiseOffset },\n          uTime : { value : 1.0 },\n          uMaterialAmbient : { value : new THREE.Vector3(...material.ambient) },\n          uMaterialSpecular : { value : new THREE.Vector3(...material.specular) },\n          uMaterialDiffuse : { value : new THREE.Vector3(...material.diffuse) },\n          uMaterialShininess : { value : material.shininess },\n          uLightAmbient : { value : new THREE.Vector3(...LIGHT_SETTINGS.ambient) },\n          uLightDiffuse : { value : new THREE.Vector3(...LIGHT_SETTINGS.diffuse) },\n          uLightSpecular : { value : new THREE.Vector3(...LIGHT_SETTINGS.specular) },\n          uLightPosition : { value : LIGHT_SETTINGS.position }\n      }\n    ]),\n    ...shaders\n  });\n\n  const depthShader = await loadFile(`${process.env.PUBLIC_URL}/shaders/sphere/depthShader.glsl`)\n\n  this.mesh = new THREE.Mesh(geometry, sphereMaterial);\n  this.mesh.customDepthMaterial = new THREE.ShaderMaterial({\n    uniforms,   \n    vertexShader: depthShader,\n    fragmentShader: THREE.ShaderLib.shadow.fragmentShader,\n  });\n\n  this.mesh.castShadow = true;\n}\n\nSphere.prototype.animate = function() {\n  // console.log(this.mesh)\n  if (this.mesh === null) return;\n  this.mesh.material.uniforms[\"uTime\"].value += 0.01;\n  this.mesh.customDepthMaterial.uniforms[\"uTime\"].value += 0.01;\n}\n\nexport default Sphere;"]},"metadata":{},"sourceType":"module"}