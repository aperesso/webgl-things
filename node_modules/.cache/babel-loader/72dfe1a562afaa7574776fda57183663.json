{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport Sphere from './scene/Sphere';\nimport Background from './scene/Background';\nimport { CAMERA_SETTINGS } from './settings';\nimport './index.css';\n\nconst App = function () {\n  this.setup = function () {\n    const _this$getDimensions = this.getDimensions(),\n          width = _this$getDimensions.width,\n          height = _this$getDimensions.height;\n\n    const canvas = document.getElementById(\"canvas\");\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(CAMERA_SETTINGS.fov, width / height, CAMERA_SETTINGS.near, CAMERA_SETTINGS.far);\n    camera.position.set(0, 0, 20);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      canvas\n    });\n    renderer.setSize(width, height);\n    renderer.shadowMap.enabled = true;\n    renderer.gammaFactor = 2.2;\n    renderer.gammaOutput = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer; // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n  };\n\n  this.lightUpScene = function () {\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);\n    this.scene.add(ambientLight);\n    const directionalLight = new THREE.SpotLight(0xfafafa, 0.8);\n    directionalLight.position.set(40, -2, 80);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    this.scene.add(directionalLight);\n    var helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n    this.scene.add(helper);\n  };\n\n  this.load = function () {\n    this.sphere = new Sphere();\n    this.background = new Background();\n    this.scene.add(this.sphere.mesh);\n    this.scene.add(this.background.mesh);\n  };\n\n  this.getDimensions = function () {\n    const canvas = document.getElementById(\"canvas\");\n\n    const _canvas$getBoundingCl = canvas.getBoundingClientRect(),\n          width = _canvas$getBoundingCl.width,\n          height = _canvas$getBoundingCl.height;\n\n    return {\n      width,\n      height\n    };\n  };\n\n  this.loop = function () {\n    this.renderer.setAnimationLoop(() => {\n      this.renderer.render(this.scene, this.camera);\n    });\n  };\n};\n\nconst app = new App();\napp.setup();\napp.lightUpScene();\napp.load();\napp.loop();","map":{"version":3,"sources":["/Users/alexiaperesson/webgl-things/src/index.js"],"names":["THREE","OrbitControls","Sphere","Background","CAMERA_SETTINGS","App","setup","getDimensions","width","height","canvas","document","getElementById","scene","Scene","camera","PerspectiveCamera","fov","near","far","position","set","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","gammaFactor","gammaOutput","type","PCFSoftShadowMap","lightUpScene","ambientLight","AmbientLight","add","directionalLight","SpotLight","castShadow","shadow","mapSize","helper","CameraHelper","load","sphere","background","mesh","getBoundingClientRect","loop","setAnimationLoop","render","app"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport Sphere from './scene/Sphere';\nimport Background from './scene/Background';\n\nimport { CAMERA_SETTINGS }  from './settings';\n\nimport './index.css';\n\nconst App = function() {\n  this.setup = function() {\n    const { width , height } = this.getDimensions();\n    const canvas = document.getElementById(\"canvas\");\n\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(\n      CAMERA_SETTINGS.fov,\n      width / height,\n      CAMERA_SETTINGS.near,\n      CAMERA_SETTINGS.far)\n    camera.position.set(0,0, 20);\n\n    const renderer = new THREE.WebGLRenderer({antialias : true, canvas});\n    renderer.setSize(width, height);\n    renderer.shadowMap.enabled = true;\n    renderer.gammaFactor = 2.2;\n    renderer.gammaOutput = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    // this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n  }\n\n  this.lightUpScene = function() {\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);\n    this.scene.add(ambientLight);\n\n    const directionalLight = new THREE.SpotLight(0xfafafa, 0.8)\n    directionalLight.position.set(40,-2,80)\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n   \n    this.scene.add(directionalLight);\n\n    var helper = new THREE.CameraHelper( directionalLight.shadow.camera );\n    this.scene.add(helper)\n  }\n\n  this.load = function() {\n    this.sphere = new Sphere();\n    this.background = new Background();\n\n    this.scene.add(this.sphere.mesh);\n    this.scene.add(this.background.mesh);\n  }\n\n  this.getDimensions = function() {\n    const canvas = document.getElementById(\"canvas\");\n    const { width , height } = canvas.getBoundingClientRect();\n    return {width, height}\n  }\n\n  this.loop = function() {\n    this.renderer.setAnimationLoop(\n      () => {\n        this.renderer.render(this.scene, this.camera)\n      }\n    )\n  }\n\n}\n\nconst app = new App();\napp.setup();\napp.lightUpScene();\napp.load();\napp.loop()"]},"metadata":{},"sourceType":"module"}