{"ast":null,"code":"import _objectSpread from \"/Users/alexiaperesson/webgl-things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { UnrealBloomPass } from 'three/examples//jsm/postprocessing/UnrealBloomPass';\nimport { loadShaders } from '../utils';\nconst margin = 200;\n\nclass PostProcessor {\n  constructor(scene, camera, renderer) {\n    this.composer = new EffectComposer(renderer);\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.gaussianPass = {\n      vertical: null,\n      horizontal: null\n    };\n    this.blurComposer = new EffectComposer(renderer);\n  }\n\n}\n\nPostProcessor.prototype.init = function () {\n  this.renderer.gammaInput = true;\n  this.renderer.gammaOutput = true;\n  this.renderer.toneMappingExposure = Math.pow(0.9, 4.0);\n  const scenePass = new RenderPass(this.scene, this.camera);\n  this.composer.addPass(scenePass);\n};\n\nPostProcessor.prototype.applyBloom = async function () {\n  const params = {\n    exposure: 0.1,\n    bloomStrength: 1.4,\n    bloomThreshold: 3,\n    bloomRadius: 5\n  };\n  const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight - margin));\n  bloomPass.threshold = params.bloomThreshold;\n  bloomPass.strength = params.bloomStrength;\n  bloomPass.radius = params.bloomRadius;\n  bloomPass.renderToScreen = true;\n  const shaders = await loadShaders('gaussianBlur/horizontal');\n  const shaderPass = new ShaderPass(_objectSpread({\n    uniforms: {\n      tDiffuse: {\n        value: null\n      },\n      resolution: {\n        value: new THREE.Vector2(window.innerWidth, window.innerHeight - margin)\n      }\n    }\n  }, shaders));\n  this.composer.addPass(bloomPass);\n};\n\nPostProcessor.prototype.render = function () {\n  // this.camera.layers.set(0);\n  // this.blurComposer.render();\n  // this.renderer.clearDepth();\n  // this.camera.layers.set(1);\n  this.composer.render();\n  this.renderer.clearDept(); // this.renderer.render(this.scene, this.camera);\n};\n\nPostProcessor.prototype.setSize = function () {\n  const w = window.innerWidth;\n  const h = window.innerHeight - margin;\n  this.composer.setSize(w, h);\n  this.renderer.setSize(w, h); // if (this.gaussianPass.vertical !== null && this.gaussianPass.horizontal !== null) {\n  //     this.gaussianPass.vertical.uniforms.resolution.value = new THREE.Vector2(w, h)\n  //     this.gaussianPass.horizontal.uniforms.resolution.value = new THREE.Vector2(w, h)\n  // }\n};\n\nexport default PostProcessor;","map":{"version":3,"sources":["/Users/alexiaperesson/webgl-things/src/classes/PostProcessing.js"],"names":["THREE","EffectComposer","RenderPass","ShaderPass","UnrealBloomPass","loadShaders","margin","PostProcessor","constructor","scene","camera","renderer","composer","gaussianPass","vertical","horizontal","blurComposer","prototype","init","gammaInput","gammaOutput","toneMappingExposure","Math","pow","scenePass","addPass","applyBloom","params","exposure","bloomStrength","bloomThreshold","bloomRadius","bloomPass","Vector2","window","innerWidth","innerHeight","threshold","strength","radius","renderToScreen","shaders","shaderPass","uniforms","tDiffuse","value","resolution","render","clearDept","setSize","w","h"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,qDAA/B;AACA,SAASC,UAAT,QAA2B,iDAA3B;AACA,SAASC,UAAT,QAA2B,iDAA3B;AACA,SAASC,eAAT,QAAgC,oDAAhC;AAGA,SAASC,WAAT,QAA2B,UAA3B;AAEA,MAAMC,MAAM,GAAG,GAAf;;AAEA,MAAMC,aAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,EAA0B;AACjC,SAAKC,QAAL,GAAgB,IAAIX,cAAJ,CAAmBU,QAAnB,CAAhB;AACA,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AAEA,SAAKE,YAAL,GAAoB;AAChBC,MAAAA,QAAQ,EAAE,IADM;AAEhBC,MAAAA,UAAU,EAAE;AAFI,KAApB;AAIA,SAAKC,YAAL,GAAoB,IAAIf,cAAJ,CAAmBU,QAAnB,CAApB;AACH;;AAZc;;AAenBJ,aAAa,CAACU,SAAd,CAAwBC,IAAxB,GAA+B,YAAW;AACtC,OAAKP,QAAL,CAAcQ,UAAd,GAA2B,IAA3B;AACA,OAAKR,QAAL,CAAcS,WAAd,GAA4B,IAA5B;AACA,OAAKT,QAAL,CAAcU,mBAAd,GAAoCC,IAAI,CAACC,GAAL,CAAU,GAAV,EAAe,GAAf,CAApC;AACA,QAAMC,SAAS,GAAG,IAAItB,UAAJ,CAAe,KAAKO,KAApB,EAA2B,KAAKC,MAAhC,CAAlB;AACA,OAAKE,QAAL,CAAca,OAAd,CAAsBD,SAAtB;AACH,CAND;;AAQAjB,aAAa,CAACU,SAAd,CAAwBS,UAAxB,GAAqC,kBAAiB;AAElD,QAAMC,MAAM,GAAG;AACXC,IAAAA,QAAQ,EAAE,GADC;AAEXC,IAAAA,aAAa,EAAE,GAFJ;AAGXC,IAAAA,cAAc,EAAE,CAHL;AAIXC,IAAAA,WAAW,EAAE;AAJF,GAAf;AAOA,QAAMC,SAAS,GAAG,IAAI5B,eAAJ,CAAoB,IAAIJ,KAAK,CAACiC,OAAV,CAAkBC,MAAM,CAACC,UAAzB,EAAoCD,MAAM,CAACE,WAAP,GAAqB9B,MAAzD,CAApB,CAAlB;AACA0B,EAAAA,SAAS,CAACK,SAAV,GAAsBV,MAAM,CAACG,cAA7B;AACAE,EAAAA,SAAS,CAACM,QAAV,GAAqBX,MAAM,CAACE,aAA5B;AACAG,EAAAA,SAAS,CAACO,MAAV,GAAmBZ,MAAM,CAACI,WAA1B;AACAC,EAAAA,SAAS,CAACQ,cAAV,GAA2B,IAA3B;AAEA,QAAMC,OAAO,GAAG,MAAMpC,WAAW,CAAC,yBAAD,CAAjC;AAEA,QAAMqC,UAAU,GAAG,IAAIvC,UAAJ;AACfwC,IAAAA,QAAQ,EAAG;AACPC,MAAAA,QAAQ,EAAG;AAAEC,QAAAA,KAAK,EAAG;AAAV,OADJ;AAEPC,MAAAA,UAAU,EAAG;AAAED,QAAAA,KAAK,EAAG,IAAI7C,KAAK,CAACiC,OAAV,CAAkBC,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAAP,GAAqB9B,MAA1D;AAAV;AAFN;AADI,KAKZmC,OALY,EAAnB;AAQA,OAAK7B,QAAL,CAAca,OAAd,CAAsBO,SAAtB;AACH,CA1BD;;AA6BAzB,aAAa,CAACU,SAAd,CAAwB8B,MAAxB,GAAiC,YAAW;AACxC;AACA;AACA;AACA;AACA,OAAKnC,QAAL,CAAcmC,MAAd;AACA,OAAKpC,QAAL,CAAcqC,SAAd,GANwC,CAOxC;AAEH,CATD;;AAWAzC,aAAa,CAACU,SAAd,CAAwBgC,OAAxB,GAAkC,YAAW;AACzC,QAAMC,CAAC,GAAGhB,MAAM,CAACC,UAAjB;AACA,QAAMgB,CAAC,GAAGjB,MAAM,CAACE,WAAP,GAAqB9B,MAA/B;AAEA,OAAKM,QAAL,CAAcqC,OAAd,CAAsBC,CAAtB,EAAyBC,CAAzB;AACA,OAAKxC,QAAL,CAAcsC,OAAd,CAAsBC,CAAtB,EAAyBC,CAAzB,EALyC,CAOzC;AACA;AACA;AACA;AAEH,CAZD;;AAcA,eAAe5C,aAAf","sourcesContent":["import * as THREE from 'three';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { UnrealBloomPass } from 'three/examples//jsm/postprocessing/UnrealBloomPass';\n\n\nimport { loadShaders} from '../utils';\n\nconst margin = 200;\n\nclass PostProcessor{\n    constructor(scene, camera, renderer) {\n        this.composer = new EffectComposer(renderer);\n        this.scene = scene;\n        this.camera = camera;\n        this.renderer = renderer;\n\n        this.gaussianPass = {\n            vertical: null, \n            horizontal: null\n        };\n        this.blurComposer = new EffectComposer(renderer);\n    }\n}\n\nPostProcessor.prototype.init = function() {\n    this.renderer.gammaInput = true\n    this.renderer.gammaOutput = true\n    this.renderer.toneMappingExposure = Math.pow( 0.9, 4.0 ) \n    const scenePass = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(scenePass);\n};\n\nPostProcessor.prototype.applyBloom = async function() {\n\n    const params = {\n        exposure: 0.1,\n        bloomStrength: 1.4,\n        bloomThreshold: 3,\n        bloomRadius: 5\n    };\n\n    const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth,window.innerHeight - margin))\n    bloomPass.threshold = params.bloomThreshold;\n    bloomPass.strength = params.bloomStrength;\n    bloomPass.radius = params.bloomRadius;\n    bloomPass.renderToScreen = true;\n\n    const shaders = await loadShaders('gaussianBlur/horizontal');\n\n    const shaderPass = new ShaderPass({\n        uniforms : {\n            tDiffuse : { value : null },\n            resolution : { value : new THREE.Vector2(window.innerWidth, window.innerHeight - margin)}\n        },\n        ...shaders\n    })\n\n    this.composer.addPass(bloomPass);\n}\n\n\nPostProcessor.prototype.render = function() {\n    // this.camera.layers.set(0);\n    // this.blurComposer.render();\n    // this.renderer.clearDepth();\n    // this.camera.layers.set(1);\n    this.composer.render();\n    this.renderer.clearDept();\n    // this.renderer.render(this.scene, this.camera);\n\n}\n\nPostProcessor.prototype.setSize = function() {\n    const w = window.innerWidth;\n    const h = window.innerHeight - margin;\n\n    this.composer.setSize(w, h);\n    this.renderer.setSize(w, h);\n\n    // if (this.gaussianPass.vertical !== null && this.gaussianPass.horizontal !== null) {\n    //     this.gaussianPass.vertical.uniforms.resolution.value = new THREE.Vector2(w, h)\n    //     this.gaussianPass.horizontal.uniforms.resolution.value = new THREE.Vector2(w, h)\n    // }\n\n}\n\nexport default PostProcessor;"]},"metadata":{},"sourceType":"module"}