{"ast":null,"code":"import _objectSpread from \"/Users/alexiaperesson/webgl-things/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as THREE from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport Material from './Material';\nimport { loadShaders, loadAudio } from '../utils';\nconst DEFAULT_SETTINGS = {\n  tesselation: 160,\n  size: 10,\n  noiseScale: 4.27,\n  noiseFrequency: 0.5,\n  noiseOffset: new THREE.Vector3(0.2, 0.2, 0.2)\n};\n\nclass Sphere {\n  constructor() {\n    this.mesh = null;\n    this.lights = null;\n    this.material = new Material();\n    this.uniforms = {\n      noiseScale: DEFAULT_SETTINGS.noiseScale,\n      noiseFrequency: DEFAULT_SETTINGS.noiseFrequency,\n      noiseOffset: DEFAULT_SETTINGS.noiseOffset\n    };\n    this.audio = null;\n    this.audioAnalyser = null;\n  }\n\n}\n\nSphere.prototype.setLights = function (lights) {\n  this.lights = lights;\n};\n\nSphere.prototype.setSound = async function () {\n  const listener = new THREE.AudioListener();\n  this.audio = new THREE.PositionalAudio(listener);\n  positionalAudio.setMediaElementSource(audioElement);\n  positionalAudio.setRefDistance(1);\n  positionalAudio.setDirectionalCone(180, 230, 0.1);\n  const soundBuffer = await loadAudio('heartbeat.wav');\n  this.audio.setBuffer(soundBuffer);\n  this.audio.play();\n  this.audio.loop = true;\n  this.audio.setRefDistance(0.3);\n  this.audio.setDirectionalCone(180, 230, 0.1);\n  this.audioAnalyser = new THREE.AudioAnalyser(this.audio, 256);\n};\n\nSphere.prototype.initMesh = async function () {\n  const _ref = await loadShaders('sphere'),\n        fragmentShader = _ref.fragmentShader,\n        vertexShader = _ref.vertexShader;\n\n  await this.setSound();\n  const geometry = new THREE.SphereBufferGeometry(DEFAULT_SETTINGS.size, DEFAULT_SETTINGS.tesselation, DEFAULT_SETTINGS.tesselation);\n  BufferGeometryUtils.computeTangents(geometry);\n  const lightUniforms = this.lights ? this.lights.getUniforms() : {};\n  const materialUniforms = this.material.getUniforms();\n  const material = new THREE.ShaderMaterial({\n    uniforms: _objectSpread({\n      uAverageFrequency: {\n        value: this.audioAnalyser.getAverageFrequency()\n      },\n      uNoiseScale: {\n        value: this.uniforms.noiseScale\n      },\n      uNoiseFrequency: {\n        value: this.uniforms.noiseFrequency\n      },\n      uNoiseOffset: {\n        value: this.uniforms.noiseOffset\n      }\n    }, materialUniforms, lightUniforms),\n    vertexShader,\n    fragmentShader\n  });\n  this.mesh = new THREE.Mesh(geometry, material);\n  this.mesh.rotation.x -= Math.PI / 2;\n  this.mesh.add(this.audio);\n};\n\nSphere.prototype.setGui = function (controller) {\n  const sphere = controller.addFolder('Sphere');\n  const noiseFolder = sphere.addFolder('Noise');\n  noiseFolder.add(this.uniforms, 'noiseScale', 0, 10);\n  noiseFolder.add(this.uniforms, 'noiseFrequency', 0, 0.4);\n  this.material.setGui(sphere);\n};\n\nSphere.prototype.animate = function () {\n  if (!this.mesh) return;\n  this.lights.setUniforms(this.mesh.material);\n  this.material.setUniforms(this.mesh.material);\n  this.mesh.material.uniforms['uAverageFrequency'].value = this.audioAnalyser.getAverageFrequency();\n  this.mesh.material.uniforms['uNoiseScale'].value = this.uniforms.noiseScale;\n  this.mesh.material.uniforms['uNoiseOffset'].value.x = this.uniforms.noiseOffset.x += 0.0001;\n  this.mesh.material.uniforms['uNoiseOffset'].value.y = this.uniforms.noiseOffset.y += 0.0001;\n  this.mesh.material.uniforms['uNoiseFrequency'].value = this.uniforms.noiseFrequency;\n};\n\nexport default Sphere;","map":{"version":3,"sources":["/Users/alexiaperesson/webgl-things/src/classes/Sphere.js"],"names":["THREE","BufferGeometryUtils","Material","loadShaders","loadAudio","DEFAULT_SETTINGS","tesselation","size","noiseScale","noiseFrequency","noiseOffset","Vector3","Sphere","constructor","mesh","lights","material","uniforms","audio","audioAnalyser","prototype","setLights","setSound","listener","AudioListener","PositionalAudio","positionalAudio","setMediaElementSource","audioElement","setRefDistance","setDirectionalCone","soundBuffer","setBuffer","play","loop","AudioAnalyser","initMesh","fragmentShader","vertexShader","geometry","SphereBufferGeometry","computeTangents","lightUniforms","getUniforms","materialUniforms","ShaderMaterial","uAverageFrequency","value","getAverageFrequency","uNoiseScale","uNoiseFrequency","uNoiseOffset","Mesh","rotation","x","Math","PI","add","setGui","controller","sphere","addFolder","noiseFolder","animate","setUniforms","y"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\nimport Material from './Material';\nimport { loadShaders, loadAudio  } from '../utils';\n\nconst DEFAULT_SETTINGS = {\n    tesselation : 160,\n    size : 10,\n    noiseScale : 4.27,\n    noiseFrequency : 0.5,\n    noiseOffset : new THREE.Vector3(0.2, 0.2, 0.2),\n}\n\nclass Sphere {\n    constructor() {\n        this.mesh = null;\n        this.lights = null;\n        this.material = new Material();\n        this.uniforms = {\n            noiseScale : DEFAULT_SETTINGS.noiseScale,\n            noiseFrequency : DEFAULT_SETTINGS.noiseFrequency,\n            noiseOffset : DEFAULT_SETTINGS.noiseOffset,\n        };\n        this.audio = null;\n        this.audioAnalyser = null;\n    }\n}\n\nSphere.prototype.setLights = function(lights) {\n    this.lights = lights\n}\n\nSphere.prototype.setSound = async function() {\n    const listener = new THREE.AudioListener();\n    this.audio = new THREE.PositionalAudio(listener);\n\n    positionalAudio.setMediaElementSource( audioElement );\n    positionalAudio.setRefDistance( 1 );\n    positionalAudio.setDirectionalCone( 180, 230, 0.1 );\n\n\n    const soundBuffer = await loadAudio('heartbeat.wav');\n    this.audio.setBuffer(soundBuffer);\n    this.audio.play();\n    this.audio.loop = true;\n    this.audio.setRefDistance( 0.3 );\n    this.audio.setDirectionalCone( 180, 230, 0.1 );\n    \n    this.audioAnalyser = new THREE.AudioAnalyser(this.audio, 256);\n}\n\nSphere.prototype.initMesh = async function() {\n    const {fragmentShader, vertexShader} = await loadShaders('sphere');\n\n    await this.setSound();\n\n    const geometry = new THREE.SphereBufferGeometry(DEFAULT_SETTINGS.size, DEFAULT_SETTINGS.tesselation, DEFAULT_SETTINGS.tesselation)\n    BufferGeometryUtils.computeTangents(geometry);\n\n    const lightUniforms = this.lights ? this.lights.getUniforms() : {};\n    const materialUniforms = this.material.getUniforms();\n\n    const material = new THREE.ShaderMaterial({\n        uniforms : {\n            uAverageFrequency : { value : this.audioAnalyser.getAverageFrequency() },\n            uNoiseScale : { value : this.uniforms.noiseScale },\n            uNoiseFrequency : { value : this.uniforms.noiseFrequency },\n            uNoiseOffset : { value : this.uniforms.noiseOffset },\n            ...materialUniforms,\n            ...lightUniforms\n        },\n        vertexShader,\n        fragmentShader,\n    })\n    \n    this.mesh = new THREE.Mesh(geometry, material); \n    this.mesh.rotation.x -= Math.PI / 2;\n    this.mesh.add(this.audio)\n}\n\nSphere.prototype.setGui = function(controller) {\n   const sphere = controller.addFolder('Sphere')\n\n   const noiseFolder = sphere.addFolder('Noise');\n   noiseFolder.add(this.uniforms, 'noiseScale', 0, 10);\n   noiseFolder.add(this.uniforms, 'noiseFrequency', 0, 0.4);\n\n   this.material.setGui(sphere);\n}\n\nSphere.prototype.animate = function() {\n    if (!this.mesh) return ;\n\n    this.lights.setUniforms(this.mesh.material);\n    this.material.setUniforms(this.mesh.material);\n\n    this.mesh.material.uniforms['uAverageFrequency'].value = this.audioAnalyser.getAverageFrequency();\n    this.mesh.material.uniforms['uNoiseScale'].value = this.uniforms.noiseScale;\n    this.mesh.material.uniforms['uNoiseOffset'].value.x = this.uniforms.noiseOffset.x += 0.0001;\n    this.mesh.material.uniforms['uNoiseOffset'].value.y = this.uniforms.noiseOffset.y += 0.0001;\n    this.mesh.material.uniforms['uNoiseFrequency'].value = this.uniforms.noiseFrequency;\n   \n}  \n\n\nexport default Sphere;"]},"metadata":{},"sourceType":"module"}