{"ast":null,"code":"import * as THREE from 'three';\nimport Sphere from './scene/Sphere';\nimport { CAMERA_SETTINGS } from './settings';\nimport './index.css';\n\nconst App = function () {\n  this.scene = null;\n  this.camera = null;\n  this.renderer = null;\n  this.sphere = null;\n\n  this.setup = function () {\n    const _this$getDimensions = this.getDimensions(),\n          width = _this$getDimensions.width,\n          height = _this$getDimensions.height;\n\n    const canvas = document.getElementById(\"canvas\");\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(CAMERA_SETTINGS.fov, width / height, CAMERA_SETTINGS.near, CAMERA_SETTINGS.far);\n    camera.position.set(0, 0, 20);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      canvas,\n      alpha: true\n    });\n    renderer.setSize(width, height);\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  this.load = function () {\n    this.sphere = new Sphere();\n    this.scene.add(this.sphere.mesh);\n  };\n\n  this.getDimensions = function () {\n    const canvas = document.getElementById(\"canvas\");\n\n    const _canvas$getBoundingCl = canvas.getBoundingClientRect(),\n          width = _canvas$getBoundingCl.width,\n          height = _canvas$getBoundingCl.height;\n\n    return {\n      width,\n      height\n    };\n  };\n\n  this.play = function () {\n    this.renderer.setAnimationLoop(() => {\n      this.renderer.render(this.scene, this.camera);\n    });\n  };\n};\n\nconst app = new App();\napp.setup();\napp.load();","map":{"version":3,"sources":["/Users/alexiaperesson/webgl-things/src/index.js"],"names":["THREE","Sphere","CAMERA_SETTINGS","App","scene","camera","renderer","sphere","setup","getDimensions","width","height","canvas","document","getElementById","Scene","PerspectiveCamera","fov","near","far","position","set","WebGLRenderer","antialias","alpha","setSize","render","load","add","mesh","getBoundingClientRect","play","setAnimationLoop","app"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,eAAT,QAAiC,YAAjC;AAEA,OAAO,aAAP;;AAEA,MAAMC,GAAG,GAAG,YAAW;AAErB,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,QAAL,GAAgB,IAAhB;AAEA,OAAKC,MAAL,GAAc,IAAd;;AAEA,OAAKC,KAAL,GAAa,YAAW;AAAA,gCACK,KAAKC,aAAL,EADL;AAAA,UACdC,KADc,uBACdA,KADc;AAAA,UACNC,MADM,uBACNA,MADM;;AAEtB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AAEA,UAAMV,KAAK,GAAG,IAAIJ,KAAK,CAACe,KAAV,EAAd;AAEA,UAAMV,MAAM,GAAG,IAAIL,KAAK,CAACgB,iBAAV,CACbd,eAAe,CAACe,GADH,EAEbP,KAAK,GAAGC,MAFK,EAGbT,eAAe,CAACgB,IAHH,EAIbhB,eAAe,CAACiB,GAJH,CAAf;AAOAd,IAAAA,MAAM,CAACe,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAsB,CAAtB,EAAwB,EAAxB;AAGA,UAAMf,QAAQ,GAAG,IAAIN,KAAK,CAACsB,aAAV,CAAwB;AAACC,MAAAA,SAAS,EAAG,IAAb;AAAmBX,MAAAA,MAAnB;AAA2BY,MAAAA,KAAK,EAAE;AAAlC,KAAxB,CAAjB;AACAlB,IAAAA,QAAQ,CAACmB,OAAT,CAAiBf,KAAjB,EAAwBC,MAAxB;AAEA,SAAKP,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKA,QAAL,CAAcoB,MAAd,CAAqB,KAAKtB,KAA1B,EAAiC,KAAKC,MAAtC;AACD,GAvBD;;AAyBA,OAAKsB,IAAL,GAAY,YAAW;AACrB,SAAKpB,MAAL,GAAc,IAAIN,MAAJ,EAAd;AAIA,SAAKG,KAAL,CAAWwB,GAAX,CAAe,KAAKrB,MAAL,CAAYsB,IAA3B;AACD,GAND;;AAQA,OAAKpB,aAAL,GAAqB,YAAW;AAC9B,UAAMG,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;;AAD8B,kCAEHF,MAAM,CAACkB,qBAAP,EAFG;AAAA,UAEtBpB,KAFsB,yBAEtBA,KAFsB;AAAA,UAEdC,MAFc,yBAEdA,MAFc;;AAG9B,WAAO;AAACD,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAP;AACD,GAJD;;AAMA,OAAKoB,IAAL,GAAY,YAAW;AACrB,SAAKzB,QAAL,CAAc0B,gBAAd,CACE,MAAM;AACJ,WAAK1B,QAAL,CAAcoB,MAAd,CAAqB,KAAKtB,KAA1B,EAAiC,KAAKC,MAAtC;AACD,KAHH;AAKD,GAND;AAQD,CAvDD;;AAyDA,MAAM4B,GAAG,GAAG,IAAI9B,GAAJ,EAAZ;AACA8B,GAAG,CAACzB,KAAJ;AACAyB,GAAG,CAACN,IAAJ","sourcesContent":["import * as THREE from 'three';\n\nimport Sphere from './scene/Sphere';\nimport { CAMERA_SETTINGS }  from './settings';\n\nimport './index.css';\n\nconst App = function() {\n\n  this.scene = null;\n  this.camera = null;\n  this.renderer = null;\n  \n  this.sphere = null;\n\n  this.setup = function() {\n    const { width , height } = this.getDimensions();\n    const canvas = document.getElementById(\"canvas\");\n\n    const scene = new THREE.Scene();\n\n    const camera = new THREE.PerspectiveCamera(\n      CAMERA_SETTINGS.fov,\n      width / height,\n      CAMERA_SETTINGS.near,\n      CAMERA_SETTINGS.far\n    )\n\n    camera.position.set(0,0,20);\n\n\n    const renderer = new THREE.WebGLRenderer({antialias : true, canvas, alpha: true});\n    renderer.setSize(width, height);\n    \n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  this.load = function() {\n    this.sphere = new Sphere();\n\n\n\n    this.scene.add(this.sphere.mesh);\n  }\n\n  this.getDimensions = function() {\n    const canvas = document.getElementById(\"canvas\");\n    const { width , height } = canvas.getBoundingClientRect();\n    return {width, height}\n  }\n\n  this.play = function() {\n    this.renderer.setAnimationLoop(\n      () => {\n        this.renderer.render(this.scene, this.camera)\n      }\n    )\n  }\n\n}\n\nconst app = new App();\napp.setup();\napp.load();"]},"metadata":{},"sourceType":"module"}